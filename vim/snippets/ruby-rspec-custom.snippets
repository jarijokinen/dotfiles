snippet d
	describe ${1:#method/.attribute/when/with} do
		${2}
	end
snippet f
	feature "${1}" do
		scenario "${2}" do
			${3}
		end
	end
snippet ba
	background do
		${1}
	end
snippet s
	scenario "${1}" do
	end
snippet c
	context "${1:when/with}" do
	end
snippet i
	it { should ${1} }
snippet its
	its(:${1}) { should ${2:== ""} }
snippet b
	before { ${1:@model = Factory.build(:model)} }
snippet su
	subject { ${1:@model} }
snippet bs
	before  { ${1:@model = Factory.build(:model)} }
	subject { ${2:@model} }
snippet ib
	it "${1}" do
		${2}
	end
snippet bb
	before do
		${1}
	end
snippet ps
	page.should ${1}
snippet hs
	page.should have_select "${1}", :options => %w(${2}), :selected => ${3}
snippet hf
	page.should have_field "${1}"
snippet hco
	page.should have_content "${1}"
snippet hc
	page.should have_css "${1}", :text => "${2}"
snippet hb
	page.should have_button "${1}"
snippet hl
	page.should have_link "${1}"
snippet hnl
	page.should have_no_link "${1}"
snippet rf
	require File.expand_path(File.dirname(__FILE__) + '/../acceptance_helper')

	feature "${1:feature}" do
		background do
			@${2:resource} = Factory.build(:$2)
			visit $2s_page
		end

		describe :index do
			before do
				@$2 = Factory.create(:$2)
				visit $2s_page
				page.should have_link @$2.$3
			end
		end

		describe :create do
			before do
				click_link "New %ucfirst($2)"
				page.should have_field "%ucfirst($3)"
				page.should have_button "Create %ucfirst($2)"
				page.should have_link "Cancel"
				fill_in "%ucfirst($3)", :with => @$2.${3:attribute}
			end

			scenario "successfully" do
				click_button "Create %ucfirst($2)"
				page.current_path.should == $2s_page
				page.should have_css ".flash.notice", :text => "%ucfirst($2) created"
				within(:css, "table.list") do
					page.should have_link @$2.$3
				end
			end

			scenario "without values" do
				fill_in "%ucfirst($3)", :with => ""
				click_button "Create %ucfirst($2)"
				within(:css, "#errors") do 
					page.should have_content "Error"
					page.should have_content "%ucfirst($3) is required"
				end
				visit $2s_page
				within(:css, "table.list") do
					page.should have_no_link @$2.$3
				end
			end

			scenario "without $3" do
				fill_in "%ucfirst($3)", :with => ""
				click_button "Create %ucfirst($2)"
				within(:css, "#errors") do
					page.should have_content "Error"
					page.should have_content "%ucfirst($3) is required"
				end
				visit $2s_page
				within(:css, "table.list") do
					page.should have_no_link @$2.$3
				end
			end

			scenario "with already existing $3" do
				click_button "Create %ucfirst($2)"
				click_link "New %ucfirst($2)"
				fill_in "%ucfirst($3)", :with => @$2.$3
				click_button "Create %ucfirst($2)"
				within(:css, "#errors") do
					page.should have_content "Error"
					page.should have_content "%ucfirst($3) has already been taken"
				end
			end
		end

		describe :update do
			before do
				@$2 = Factory.create(:$2)
				visit $2s_page
				click_link @$2.$3
				page.should have_css "h1", :text => "Edit %ucfirst($2)"
				within(:css, "form") do
					page.should have_field "%ucfirst($3)", :with => @$2.$3
					page.should have_button "Update %ucfirst($2)"
					page.should have_link "Cancel"
				end
				page.should have_link "Delete %ucfirst($2)"
			end

			scenario "successfully" do
				fill_in "%ucfirst($3)", :with => "New value"
				click_button "Update %ucfirst($2)"
				page.current_path.should == $2s_page
				page.should have_css ".flash.notice", :text => "%ucfirst($2) updated"
				within(:css, "table.list") do
					page.should have_link "New value"
					page.should have_no_link @$2.$3
				end
			end
		end

		describe :delete do
			before do
				@$2 = Factory.create(:$2)
				visit $2s_page
				click_link @$2.$3
				page.should have_css "h1", :text => "Edit %ucfirst($2)"
				page.should have_link "Delete %ucfirst($2)"
				page.should have_link "Cancel"
			end

			scenario "successfully" do
				click_link "Delete %ucfirst($2)"
				page.current_path.should == $2s_page
				page.should have_css ".flash.notice", :text => "%ucfirst($2) deleted"
				within(:css, "table.list") do
					page.should have_no_link @$2.$3
				end
			end
		end
	end
snippet ms
	before  { @${1:resource} = Factory.create(:$1) }
	subject { @$1 }

	describe :associations do
	end

	describe :data do
		${3:it { should have_db_column().of_type() }}
	end

	describe :validations do
	end
snippet wi
	within(:css, "${1:selector}") do
		${2}
	end
snippet fi
	fill_in "${1:field}", :with => "${2:value}"
snippet cb
	click_button "${1:button}"
snippet cli
	click_link "${1:link}"
snippet cp
	current_path.should == ${1:path}
